[{"short_id":"zcj8vy","short_id_url":"https://lobste.rs/s/zcj8vy","created_at":"2023-08-24T12:00:03.000-05:00","title":"Factor 0.99 now available","url":"https://re.factorcode.org/2023/08/factor-0-99-now-available.html","score":31,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zcj8vy/factor_0_99_now_available","submitter_user":{"username":"mrjbq7","created_at":"2020-01-25T20:48:09.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":48,"avatar_url":"/avatars/mrjbq7-100.png","invited_by_user":"erg"},"tags":["release"]},{"short_id":"gkxg9p","short_id_url":"https://lobste.rs/s/gkxg9p","created_at":"2023-08-24T08:16:38.000-05:00","title":"Leaving Haskell behind","url":"https://journal.infinitenegativeutility.com/leaving-haskell-behind","score":34,"flags":0,"comment_count":22,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gkxg9p/leaving_haskell_behind","submitter_user":{"username":"restrictedchoice","created_at":"2020-01-16T12:27:56.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":369,"avatar_url":"/avatars/restrictedchoice-100.png","invited_by_user":"pgr0ss"},"tags":["haskell"]},{"short_id":"sbkuqa","short_id_url":"https://lobste.rs/s/sbkuqa","created_at":"2023-08-24T11:33:04.000-05:00","title":"Celebrating Daemontools","url":"https://journal.infinitenegativeutility.com/celebrating-daemontools","score":15,"flags":0,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/sbkuqa/celebrating_daemontools","submitter_user":{"username":"pzel","created_at":"2015-12-30T16:11:12.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":700,"avatar_url":"/avatars/pzel-100.png","invited_by_user":"jan","github_username":"pzel"},"tags":["unix"]},{"short_id":"kaxcd8","short_id_url":"https://lobste.rs/s/kaxcd8","created_at":"2023-08-24T01:30:50.000-05:00","title":"print(“lol”) doubled the speed of my Go function","url":"https://medium.com/@ludirehak/printing-lol-doubled-the-speed-of-my-go-code-e32e02fc3f92","score":25,"flags":0,"comment_count":14,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kaxcd8/print_lol_doubled_speed_my_go_function","submitter_user":{"username":"knl","created_at":"2017-07-21T07:12:24.000-05:00","is_admin":false,"about":"Senior software engineer specialized in distributed systems and low latency, high frequency trading infrastructure.","is_moderator":false,"karma":7274,"avatar_url":"/avatars/knl-100.png","invited_by_user":"james","github_username":"knl","keybase_signatures":[{"kb_username":"knl","sig_hash":"cb1fe17fead6d360f9abca902132b2407ee736f1a243f615ad9757dfe8d17e3b0f"}]},"tags":["go","performance"]},{"short_id":"ajarjp","short_id_url":"https://lobste.rs/s/ajarjp","created_at":"2023-08-24T03:21:13.000-05:00","title":"FreeBSD on Firecracker","url":"https://www.usenix.org/publications/loginonline/freebsd-firecracker","score":26,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ajarjp/freebsd_on_firecracker","submitter_user":{"username":"abhi9u","created_at":"2016-05-27T03:28:06.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":111,"avatar_url":"/avatars/abhi9u-100.png","invited_by_user":"coypoop"},"tags":["freebsd"]},{"short_id":"vb3vv7","short_id_url":"https://lobste.rs/s/vb3vv7","created_at":"2023-08-24T06:19:27.000-05:00","title":"The Tao of Go","url":"https://bitfieldconsulting.com/golang/tao-of-go","score":3,"flags":6,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vb3vv7/tao_go","submitter_user":{"username":"bitfield","created_at":"2023-08-21T05:27:27.000-05:00","is_admin":false,"about":"Recreational physicist.","is_moderator":false,"karma":4,"avatar_url":"/avatars/bitfield-100.png","invited_by_user":"355E3B"},"tags":["go"]},{"short_id":"5mbrob","short_id_url":"https://lobste.rs/s/5mbrob","created_at":"2023-08-24T11:43:19.000-05:00","title":"Bypassing Bitlocker using a cheap logic analyzer on a Lenovo laptop","url":"https://www.errno.fr/BypassingBitlocker.html","score":6,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/5mbrob/bypassing_bitlocker_using_cheap_logic","submitter_user":{"username":"indigo","created_at":"2015-10-15T11:52:50.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":775,"avatar_url":"/avatars/indigo-100.png","invited_by_user":"tluyben2"},"tags":["cryptography","security"]},{"short_id":"dby2to","short_id_url":"https://lobste.rs/s/dby2to","created_at":"2023-08-24T13:34:05.000-05:00","title":"Making NetBSD Multiboot-Compatible (2007)","url":"https://jmmv.dev/2007/03/making-netbsd-multiboot-compatible.html","score":3,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dby2to/making_netbsd_multiboot_compatible_2007","submitter_user":{"username":"jmmv","created_at":"2020-08-18T09:08:21.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":98,"avatar_url":"/avatars/jmmv-100.png","invited_by_user":"sevan"},"tags":["netbsd"]},{"short_id":"5ev73h","short_id_url":"https://lobste.rs/s/5ev73h","created_at":"2023-08-24T12:00:56.000-05:00","title":"Propositions as types: explained (and debunked)","url":"https://lawrencecpaulson.github.io/2023/08/23/Propositions_as_Types.html","score":7,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/5ev73h/propositions_as_types_explained","submitter_user":{"username":"amw-zero","created_at":"2021-09-21T19:57:11.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1521,"avatar_url":"/avatars/amw-zero-100.png","invited_by_user":"mrjoes"},"tags":["formalmethods","plt"]},{"short_id":"prrrbn","short_id_url":"https://lobste.rs/s/prrrbn","created_at":"2023-08-23T12:34:21.000-05:00","title":"Adding Wi-Fi to the Macintosh Portable","url":"https://jcs.org/2023/08/23/scsiwifi","score":46,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/prrrbn/adding_wi_fi_macintosh_portable","submitter_user":{"username":"jcs","created_at":"2012-06-30T16:39:19.000-05:00","is_admin":false,"about":"hello, cyberpals","is_moderator":false,"karma":16180,"avatar_url":"/avatars/jcs-100.png","invited_by_user":null,"github_username":"jcs","twitter_username":"jcs"},"tags":["hardware","mac"]},{"short_id":"ph7rnw","short_id_url":"https://lobste.rs/s/ph7rnw","created_at":"2023-08-24T16:42:07.000-05:00","title":"Evaluating Algebraic Expressions using Parser Combinators","url":"https://blog.varunramesh.net/posts/algebraic-expressions-using-parser-combinators/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ph7rnw/evaluating_algebraic_expressions_using","submitter_user":{"username":"vramesh","created_at":"2014-07-09T13:15:42.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":49,"avatar_url":"/avatars/vramesh-100.png","invited_by_user":"sqs","github_username":"rameshvarun"},"tags":["javascript"]},{"short_id":"a58cnr","short_id_url":"https://lobste.rs/s/a58cnr","created_at":"2023-08-24T10:10:05.000-05:00","title":"Earning the privilege to work on unoriginal problems","url":"https://landmines.substack.com/p/earning-the-privilege-to-work-on","score":2,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/a58cnr/earning_privilege_work_on_unoriginal","submitter_user":{"username":"machete","created_at":"2021-04-12T10:29:12.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":8,"avatar_url":"/avatars/machete-100.png","invited_by_user":"eandre"},"tags":["devops","programming"]},{"short_id":"zs5mut","short_id_url":"https://lobste.rs/s/zs5mut","created_at":"2023-08-23T13:24:03.000-05:00","title":"HashiCorp, Terraform, and OpenTF","url":"https://lwn.net/SubscriberLink/942346/014f407d03f4cd03/","score":38,"flags":1,"comment_count":30,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zs5mut/hashicorp_terraform_opentf","submitter_user":{"username":"lollipopman","created_at":"2019-03-06T12:26:49.000-06:00","is_admin":false,"about":"UNIX Mechanic","is_moderator":false,"karma":538,"avatar_url":"/avatars/lollipopman-100.png","invited_by_user":"stephen","github_username":"lollipopman"},"tags":["devops","law"]},{"short_id":"ewzxj9","short_id_url":"https://lobste.rs/s/ewzxj9","created_at":"2023-08-23T15:12:29.000-05:00","title":"Flipper 1.0.0","url":"https://www.johnnunemaker.com/flipper-1-0/","score":26,"flags":1,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ewzxj9/flipper_1_0_0","submitter_user":{"username":"jnunemaker","created_at":"2020-12-30T20:05:13.000-06:00","is_admin":false,"about":"Programmer/owner at [Fewer \u0026 Faster](https://fewerandfaster.com) and [Box Out Sports](https://boxoutsports.com)","is_moderator":false,"karma":74,"avatar_url":"/avatars/jnunemaker-100.png","invited_by_user":"soulcutter"},"tags":["ruby"]},{"short_id":"skjtga","short_id_url":"https://lobste.rs/s/skjtga","created_at":"2023-08-23T10:10:47.000-05:00","title":"PSA: Add dir=\"auto\" to your inputs and textareas","url":"https://mough.xyz/312/psa-add-dir-auto-to-your-inputs-and-textareas","score":38,"flags":0,"comment_count":11,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/skjtga/psa_add_dir_auto_your_inputs_textareas","submitter_user":{"username":"acatton","created_at":"2015-02-13T18:54:10.000-06:00","is_admin":false,"about":"I'm just a software engineer who likes his job.\r\n\r\nI'm currently a Site Reliability Engineer at Google, Inc.\r\n\r\n**Opinions are my own, and NOT the views of my current or past employers**","is_moderator":false,"karma":2683,"avatar_url":"/avatars/acatton-100.png","invited_by_user":"csantosb","github_username":"acatton"},"tags":["a11y","web"]},{"short_id":"h6bkmm","short_id_url":"https://lobste.rs/s/h6bkmm","created_at":"2023-08-24T01:49:47.000-05:00","title":"Laziness in Haskell — Part 2: Why not Strict Haskell?","url":"https://www.youtube.com/watch?v=NCM8pRiLtAc","score":13,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/h6bkmm/laziness_haskell_part_2_why_not_strict","submitter_user":{"username":"adamshaylor","created_at":"2020-10-26T20:04:57.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":2553,"avatar_url":"/avatars/adamshaylor-100.png","invited_by_user":"peterc","github_username":"adamshaylor","keybase_signatures":[{"kb_username":"adamshaylor","sig_hash":"0ebd1a3d88d97f20922147a75889dfcae02b632d94156b9315a6d93384ae2e4f0f"}]},"tags":["haskell","video"]},{"short_id":"d560iz","short_id_url":"https://lobste.rs/s/d560iz","created_at":"2023-08-24T03:07:43.000-05:00","title":"Everything you never wanted to know about Win32 environment blocks","url":"https://nullprogram.com/blog/2023/08/23/","score":9,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/d560iz/everything_you_never_wanted_know_about","submitter_user":{"username":"raymii","created_at":"2013-11-20T11:58:43.000-06:00","is_admin":false,"about":"🐋\r\nhttps://raymii.org","is_moderator":false,"karma":22635,"avatar_url":"/avatars/raymii-100.png","invited_by_user":"journeysquid"},"tags":["c","windows"]},{"short_id":"edgsyh","short_id_url":"https://lobste.rs/s/edgsyh","created_at":"2023-08-23T11:04:15.000-05:00","title":"Use web components for what they’re good at","url":"https://nolanlawson.com/2023/08/23/use-web-components-for-what-theyre-good-at/","score":24,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/edgsyh/use_web_components_for_what_they_re_good_at","submitter_user":{"username":"nolan","created_at":"2018-01-06T13:39:52.000-06:00","is_admin":false,"about":"Website: https://nolanlawson.com/\r\nMastodon: https://toot.cafe/@nolan","is_moderator":false,"karma":704,"avatar_url":"/avatars/nolan-100.png","invited_by_user":"calvin"},"tags":["web"]},{"short_id":"izjizc","short_id_url":"https://lobste.rs/s/izjizc","created_at":"2023-08-23T15:11:26.000-05:00","title":"CVE-2023-4273: a vulnerability in the Linux exFAT driver","url":"https://dfir.ru/2023/08/23/cve-2023-4273-a-vulnerability-in-the-linux-exfat-driver/","score":20,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/izjizc/cve_2023_4273_vulnerability_linux_exfat","submitter_user":{"username":"fro","created_at":"2016-04-13T15:27:31.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1830,"avatar_url":"/avatars/fro-100.png","invited_by_user":"xero"},"tags":["linux","security"]},{"short_id":"pgzpsc","short_id_url":"https://lobste.rs/s/pgzpsc","created_at":"2023-08-24T11:48:59.000-05:00","title":"Microsoft's Revocation of the Verisign Class 3 Public Primary Certification Authority - G5 Root Certificate","url":"https://airlockdigital.com/microsofts-revocation-of-the-verisign-class-3-public-primary-certification-authority-g5-root-certificate/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pgzpsc/microsoft_s_revocation_verisign_class_3","submitter_user":{"username":"raymii","created_at":"2013-11-20T11:58:43.000-06:00","is_admin":false,"about":"🐋\r\nhttps://raymii.org","is_moderator":false,"karma":22635,"avatar_url":"/avatars/raymii-100.png","invited_by_user":"journeysquid"},"tags":["security"]},{"short_id":"sbjrkg","short_id_url":"https://lobste.rs/s/sbjrkg","created_at":"2023-08-24T18:02:04.000-05:00","title":"Making FreeBSD QUIC","url":"https://www.youtube.com/watch?v=QEKyBr1LS3s","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/sbjrkg/making_freebsd_quic","submitter_user":{"username":"dbremner","created_at":"2012-09-06T19:01:18.000-05:00","is_admin":false,"about":"C, C++, C#, and recently Python, Swift, and Objective-C.  \r\nLearning Scala.","is_moderator":false,"karma":3073,"avatar_url":"/avatars/dbremner-100.png","invited_by_user":"pushcx","github_username":"dbremner"},"tags":["freebsd","performance","video"]},{"short_id":"sjsueq","short_id_url":"https://lobste.rs/s/sjsueq","created_at":"2023-08-24T17:28:15.000-05:00","title":"A philosophy of software design by John Ousterhout (summarized by Matt Duck)","url":"https://www.mattduck.com/2021-04-a-philosophy-of-software-design.html","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eCame across this article today, and it really intrigued me, especially in the context of the other recent “No one actually wants simplicity” post at \u003ca href=\"https://lobste.rs/s/ao2x0v/no_one_actually_wants_simplicity\" rel=\"ugc\"\u003ehttps://lobste.rs/s/ao2x0v/no_one_actually_wants_simplicity\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe main takeaway from the latter (IMO) was that a lot of people don’t actually prioritize simplicity, even though they think they do. Simplicity is often at odds with other things (performance, desired features, correctness, unit testability as opposed to end-to-end), and we sometimes let those other things universally win, and as a result, the simplicity of the codebases suffer. Without simplicity, our codebases become harder to think about and harder to change, which then itself leads to development slowdowns, more logic bugs, etc.\u003c/p\u003e\n\u003cp\u003eReading the linked summary OP, it occurs to me that while I agree with all of the points, they often come into conflict with other priorities.\u003c/p\u003e\n\u003cp\u003eFor example, in language design, we often celebrate extra static analysis that helps us eliminate certain classes of bugs or make things more performant. Some examples of this are in async/await (C# etc.), borrow checking (Rust), and monads (Haskell etc.). However, all of these can cause extra implementation details to be exposed in function signatures and ripple to callers’ callers’ callers, often leaking through abstractions/interfaces/APIs and causing constraints to spread throughout the codebase. Exactly what chapter 2 warned us of: change amplification, cognitive load, and inability to know whether a proposed solution will work (because of superfluous constraints). Static analysis is about spreading knowledge for correctness and performance, abstraction is about encapsulating it for simplicity and flexibility. There is a tension between the two.\u003c/p\u003e\n\u003cp\u003eWe also see this in game design. The latest trend is to use ECS for every game, when it’s often more appropriate (IMO) for turn-based games to make an entity that encapsulates and contains its own components (wrote about this once in \u003ca href=\"https://www.reddit.com/r/roguelikedev/comments/i3xekn/ec_vs_ecs_for_roguelikes/\" rel=\"ugc\"\u003ehttps://www.reddit.com/r/roguelikedev/comments/i3xekn/ec_vs_ecs_for_roguelikes/\u003c/a\u003e) and then expose them via certain kinds of interfaces. It makes things simpler; less global state and more encapsulation, but it means we need to use the heap instead of global vectors of components, so it’s a bit slower to allocate and deallocate. Another place where performance is in contention with simplicity and encapsulation.\u003c/p\u003e\n\u003cp\u003eIt’s interesting to read the article summary through the lens of “What have I sacrificed for good software design? Do I actually care about these things, or just pay them lip service and never prioritize them?”\u003c/p\u003e\n\u003cp\u003eI’d love to hear more situations where good design has been in contention with other priorities like performance, correctness, timelines, etc. where there was no clear way to get the best of all worlds. What did you sacrifice? How did you choose?\u003c/p\u003e\n\u003cp\u003eCheers!\u003c/p\u003e\n","description_plain":"Came across this article today, and it really intrigued me, especially in the context of the other recent \"No one actually wants simplicity\" post at https://lobste.rs/s/ao2x0v/no_one_actually_wants_simplicity.\r\n\r\nThe main takeaway from the latter (IMO) was that a lot of people don't actually prioritize simplicity, even though they think they do. Simplicity is often at odds with other things (performance, desired features, correctness, unit testability as opposed to end-to-end), and we sometimes let those other things universally win, and as a result, the simplicity of the codebases suffer. Without simplicity, our codebases become harder to think about and harder to change, which then itself leads to development slowdowns, more logic bugs, etc.\r\n\r\nReading the linked summary OP, it occurs to me that while I agree with all of the points, they often come into conflict with other priorities.\r\n\r\nFor example, in language design, we often celebrate extra static analysis that helps us eliminate certain classes of bugs or make things more performant. Some examples of this are in async/await (C# etc.), borrow checking (Rust), and monads (Haskell etc.). However, all of these can cause extra implementation details to be exposed in function signatures and ripple to callers' callers' callers, often leaking through abstractions/interfaces/APIs and causing constraints to spread throughout the codebase. Exactly what chapter 2 warned us of: change amplification, cognitive load, and inability to know whether a proposed solution will work (because of superfluous constraints). Static analysis is about spreading knowledge for correctness and performance, abstraction is about encapsulating it for simplicity and flexibility. There is a tension between the two.\r\n\r\nWe also see this in game design. The latest trend is to use ECS for every game, when it's often more appropriate (IMO) for turn-based games to make an entity that encapsulates and contains its own components (wrote about this once in https://www.reddit.com/r/roguelikedev/comments/i3xekn/ec_vs_ecs_for_roguelikes/) and then expose them via certain kinds of interfaces. It makes things simpler; less global state and more encapsulation, but it means we need to use the heap instead of global vectors of components, so it's a bit slower to allocate and deallocate. Another place where performance is in contention with simplicity and encapsulation.\r\n\r\nIt's interesting to read the article summary through the lens of \"What have I sacrificed for good software design? Do I actually care about these things, or just pay them lip service and never prioritize them?\"\r\n\r\nI'd love to hear more situations where good design has been in contention with other priorities like performance, correctness, timelines, etc. where there was no clear way to get the best of all worlds. What did you sacrifice? How did you choose?\r\n\r\nCheers!","comments_url":"https://lobste.rs/s/sjsueq/philosophy_software_design_by_john","submitter_user":{"username":"Verdagon","created_at":"2020-07-31T04:47:19.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":320,"avatar_url":"/avatars/Verdagon-100.png","invited_by_user":"slavfox"},"tags":["programming"]},{"short_id":"mu41fo","short_id_url":"https://lobste.rs/s/mu41fo","created_at":"2023-08-23T14:49:03.000-05:00","title":"C/C++ performance pitfall: int8_t, aliasing and the ways out","url":"https://gist.github.com/alexei-zaripov/dcc14c78819c5f1354afe8b70932007c","score":28,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mu41fo/c_c_performance_pitfall_int8_t_aliasing","submitter_user":{"username":"raymii","created_at":"2013-11-20T11:58:43.000-06:00","is_admin":false,"about":"🐋\r\nhttps://raymii.org","is_moderator":false,"karma":22635,"avatar_url":"/avatars/raymii-100.png","invited_by_user":"journeysquid"},"tags":["c","c++"]},{"short_id":"0yzsrt","short_id_url":"https://lobste.rs/s/0yzsrt","created_at":"2023-08-23T20:16:05.000-05:00","title":"Bun v0.8.0","url":"https://bun.sh/blog/bun-v0.8.0","score":15,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/0yzsrt/bun_v0_8_0","submitter_user":{"username":"beans42","created_at":"2022-04-20T01:18:00.000-05:00","is_admin":false,"about":"Second year computing student @ Queens.\r\nLooking for part-time jobs and internships :)","is_moderator":false,"karma":14,"avatar_url":"/avatars/beans42-100.png","invited_by_user":"sshaw","github_username":"beans42"},"tags":["nodejs"]},{"short_id":"p8ww7b","short_id_url":"https://lobste.rs/s/p8ww7b","created_at":"2023-08-24T10:15:25.000-05:00","title":"Effective Programming in OCaml (2021)","url":"https://youtu.be/X28PFYvZ_V8?si=ydK0LqXJGarZSY--","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/p8ww7b/effective_programming_ocaml_2021","submitter_user":{"username":"agent281","created_at":"2017-04-15T20:12:16.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":3476,"avatar_url":"/avatars/agent281-100.png","invited_by_user":"numberten"},"tags":["ml","video"]}]