[{"short_id":"kwqkar","short_id_url":"https://lobste.rs/s/kwqkar","created_at":"2023-07-11T07:16:49.000-05:00","title":"We Put a Distributed Database In the Browser – And Made a Game of It","url":"https://tigerbeetle.com/blog/2023-07-11-we-put-a-distributed-database-in-the-browser/","score":24,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kwqkar/we_put_distributed_database_browser_made","submitter_user":{"username":"eatonphil","created_at":"2019-09-01T20:23:02.000-05:00","is_admin":false,"about":"Cofounder at tigerbeetle.com. More info at eatonphil.com.\r\n\r\nphil@eatonphil.com","is_moderator":false,"karma":5012,"avatar_url":"/avatars/eatonphil-100.png","invited_by_user":"calvin","github_username":"eatonphil","twitter_username":"eatonphil"},"tags":["databases","distributed","testing","zig"]},{"short_id":"j8xgym","short_id_url":"https://lobste.rs/s/j8xgym","created_at":"2023-07-11T06:21:45.000-05:00","title":"pytest fixtures are magic","url":"https://www.revsys.com/tidbits/pytest-fixtures-are-magic/","score":10,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/j8xgym/pytest_fixtures_are_magic","submitter_user":{"username":"frankwiles","created_at":"2017-03-09T11:22:03.000-06:00","is_admin":false,"about":"Expert in building, scaling, and maintaining complex web applications. Python/Django/React/PostgreSQL on Kubernetes.\r\n\r\nPresident/Founder of REVSYS (www.revsys.com @revsys) and Former President of the Django Software Foundation","is_moderator":false,"karma":10,"avatar_url":"/avatars/frankwiles-100.png","invited_by_user":"myusuf3"},"tags":["python","testing"]},{"short_id":"xeubho","short_id_url":"https://lobste.rs/s/xeubho","created_at":"2023-07-11T02:38:20.000-05:00","title":"Why are Prometheus queries hard?","url":"https://fiberplane.com/blog/why-are-prometheus-queries-hard","score":12,"flags":0,"comment_count":16,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xeubho/why_are_prometheus_queries_hard","submitter_user":{"username":"emschwartz","created_at":"2022-03-15T14:21:17.000-05:00","is_admin":false,"about":"Rust / Typescript engineer. Created + currently working on autometrics (https://github.com/autometrics-dev) at Fiberplane. Previously co-created the Interledger Protocol (interledger.org) at Ripple. ","is_moderator":false,"karma":105,"avatar_url":"/avatars/emschwartz-100.png","invited_by_user":"danderson","github_username":"emschwartz","twitter_username":"_emschwartz"},"tags":["debugging","devops"]},{"short_id":"3xzdhe","short_id_url":"https://lobste.rs/s/3xzdhe","created_at":"2023-07-11T08:11:52.000-05:00","title":"mirrord as an alternative to Telepresence","url":"https://metalbear.co/blog/mirrord-as-an-alternative-to-telepresence/","score":6,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/3xzdhe/mirrord_as_alternative_telepresence","submitter_user":{"username":"infiniteregrets","created_at":"2022-07-05T11:05:02.000-05:00","is_admin":false,"about":"Hi! My name is Mehul and I am studying CS at McMasterU and working at MetalBear!","is_moderator":false,"karma":32,"avatar_url":"/avatars/infiniteregrets-100.png","invited_by_user":"355E3B"},"tags":["debugging","devops"]},{"short_id":"9xeffm","short_id_url":"https://lobste.rs/s/9xeffm","created_at":"2023-07-11T10:20:42.000-05:00","title":"Vale's First Prototype for Immutable Region Borrowing","url":"https://verdagon.dev/blog/first-regions-prototype","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/9xeffm/vale_s_first_prototype_for_immutable","submitter_user":{"username":"Verdagon","created_at":"2020-07-31T04:47:19.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":281,"avatar_url":"/avatars/Verdagon-100.png","invited_by_user":"slavfox"},"tags":["performance","plt"]},{"short_id":"ycel14","short_id_url":"https://lobste.rs/s/ycel14","created_at":"2023-07-10T12:36:10.000-05:00","title":"The easiest way to speed up Python with Rust","url":"https://pythonspeed.com/articles/easiest-rust-python/","score":33,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ycel14/easiest_way_speed_up_python_with_rust","submitter_user":{"username":"itamarst","created_at":"2016-04-28T10:05:47.000-05:00","is_admin":false,"about":"Writing about Python performance and faster development at https://pythonspeed.com, as well as offering consulting services. Writing about work/life balance and other software engineering skills at https://codewithoutrules.com.\r\n","is_moderator":false,"karma":5434,"avatar_url":"/avatars/itamarst-100.png","invited_by_user":"0x2ba22e11"},"tags":["python","rust"]},{"short_id":"xvxrv2","short_id_url":"https://lobste.rs/s/xvxrv2","created_at":"2023-07-11T09:53:21.000-05:00","title":"The day my ping took countermeasures","url":"https://blog.cloudflare.com/the-day-my-ping-took-countermeasures/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xvxrv2/day_my_ping_took_countermeasures","submitter_user":{"username":"majke","created_at":"2018-03-29T10:41:09.000-05:00","is_admin":false,"about":"  Enthusiastic geek         https://idea.popcount.org\r\n                            https://github.com/majek","is_moderator":false,"karma":775,"avatar_url":"/avatars/majke-100.png","invited_by_user":"jamesog"},"tags":["linux","networking"]},{"short_id":"nvtnqv","short_id_url":"https://lobste.rs/s/nvtnqv","created_at":"2023-07-11T11:17:51.000-05:00","title":"Retro: a modern, pragmatic Forth","url":"https://retroforth.org/","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nvtnqv/retro_modern_pragmatic_forth","submitter_user":{"username":"Drakonis","created_at":"2016-09-05T12:37:08.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":215,"avatar_url":"/avatars/Drakonis-100.png","invited_by_user":"albino"},"tags":["programming"]},{"short_id":"6fvizz","short_id_url":"https://lobste.rs/s/6fvizz","created_at":"2023-07-11T05:43:26.000-05:00","title":"Zig Bits 0x4 - Building an HTTP client/server from scratch","url":"https://blog.orhun.dev/zig-bits-04/","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/6fvizz/zig_bits_0x4_building_http_client_server","submitter_user":{"username":"orhun","created_at":"2022-04-16T17:58:30.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":238,"avatar_url":"/avatars/orhun-100.png","invited_by_user":"extrawurst"},"tags":["programming","zig"]},{"short_id":"bsnbgk","short_id_url":"https://lobste.rs/s/bsnbgk","created_at":"2023-07-11T00:11:11.000-05:00","title":"Shortening the Let’s Encrypt Chain of Trust","url":"https://letsencrypt.org/2023/07/10/cross-sign-expiration.html","score":10,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bsnbgk/shortening_let_s_encrypt_chain_trust","submitter_user":{"username":"toastal","created_at":"2021-07-12T04:15:50.000-05:00","is_admin":false,"about":"a disciple of functional programming\r\n\r\nStop using Microsoft products; say _NO_ to neo-EEE including Windows, WSL, GitHub, Sponsors, Copilot, VS Code, Codespaces, Azure, npm, Teams","is_moderator":false,"karma":2310,"avatar_url":"/avatars/toastal-100.png","invited_by_user":"gerikson","github_username":"toastal","twitter_username":"toastal","keybase_signatures":[{"kb_username":"toastal","sig_hash":"be4ea8b4b314c4342e5dd97f1d845cc8586de0b0ec40ab4cd872f31071eab6030f"}]},"tags":["security","web"]},{"short_id":"ewxw1i","short_id_url":"https://lobste.rs/s/ewxw1i","created_at":"2023-07-11T11:10:12.000-05:00","title":"Less-technical introductions to type checking?","url":"","score":2,"flags":0,"comment_count":2,"description":"\u003cp\u003eI’ve picked up my \u003ca href=\"https://github.com/snej/tails\" rel=\"ugc\"\u003eTails\u003c/a\u003e project again — a little Forth-like language using a fast tail-calling threaded interpreter. It’s statically-typed, but I’ve run into the limits of its very simple type system and I want to fix that*.\u003c/p\u003e\n\u003cp\u003eI’d like to read more about type systems, type checkers, type inference … but everything I’ve seen on the topic is quite technical and leaves me lost in a fog of lambda calculus, category theory and advanced FP techniques.\u003c/p\u003e\n\u003cp\u003eIs there anything that explains these topics from more of an implementor’s perspective, preferably without assuming the reader is skilled in OCaml or Haskell, and preferably using [pseudo]code instead of math notation? Or do I need to suck it up and study texts like \u003cem\u003eSICP\u003c/em\u003e and \u003cem\u003eLearn You A Haskell\u003c/em\u003e first?\u003c/p\u003e\n\u003cp\u003eFWIW, I’m pretty familiar with parsers and bytecode interpreters, having implemented several over the years, but for \u003cem\u003edynamically typed\u003c/em\u003e languages. Tails is my first attempt at static typing.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e* the problems I’m working on now have to do with type-checking calls to lambdas (“quotes”). I need to extend the type system to represent the signature of a lambda parameter within a function signature, and to do this “row polymorphism” thing that’s unique to concatenative languages.\u003c/p\u003e\n\u003c/blockquote\u003e\n","description_plain":"I’ve picked up my [Tails](https://github.com/snej/tails) project again — a little Forth-like language using a fast tail-calling threaded interpreter. It’s statically-typed, but I’ve run into the limits of its very simple type system and I want to fix that\\*.\r\n\r\nI’d like to read more about type systems, type checkers, type inference … but everything I’ve seen on the topic is quite technical and leaves me lost in a fog of lambda calculus, category theory and advanced FP techniques.\r\n\r\nIs there anything that explains these topics from more of an implementor’s perspective, preferably without assuming the reader is skilled in OCaml or Haskell, and preferably using [pseudo]code instead of math notation? Or do I need to suck it up and study texts like _SICP_ and _Learn You A Haskell_ first?\r\n\r\nFWIW, I’m pretty familiar with parsers and bytecode interpreters, having implemented several over the years, but for _dynamically typed_ languages. Tails is my first attempt at static typing.\r\n\r\n\u003e \\* the problems I’m working on now have to do with type-checking calls to lambdas (“quotes”). I need to extend the type system to represent the signature of a lambda parameter within a function signature, and to do this “row polymorphism” thing that’s unique to concatenative languages.","comments_url":"https://lobste.rs/s/ewxw1i/less_technical_introductions_type","submitter_user":{"username":"snej","created_at":"2020-01-26T19:05:30.000-06:00","is_admin":false,"about":"Mobile Architect at Couchbase. Apple veteran, 1991-2007 (iChat, Safari, Java, OpenDoc, AppleScript.)\r\nBragging rights: I came up with the speech bubbles that most chat GUIs use nowadays.\r\nIn my spare time I play guitar and buy synthesizers.","is_moderator":false,"karma":9113,"avatar_url":"/avatars/snej-100.png","invited_by_user":"bbrks","github_username":"snej"},"tags":["ask","compilers","plt"]},{"short_id":"gaz50h","short_id_url":"https://lobste.rs/s/gaz50h","created_at":"2023-07-10T12:38:07.000-05:00","title":"How Ahrefs Saved US$400M in 3 Years by NOT Going to the Cloud","url":"https://tech.ahrefs.com/how-ahrefs-saved-us-400m-in-3-years-by-not-going-to-the-cloud-8939dd930af8","score":21,"flags":0,"comment_count":21,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gaz50h/how_ahrefs_saved_us_400m_3_years_by_not","submitter_user":{"username":"athaller","created_at":"2021-01-13T05:40:18.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":42,"avatar_url":"/avatars/athaller-100.png","invited_by_user":"mre"},"tags":["performance"]},{"short_id":"vhglry","short_id_url":"https://lobste.rs/s/vhglry","created_at":"2023-07-11T11:32:11.000-05:00","title":"Polymorphic Relationships in ActiveRecord","url":"https://dick.codes/2023/07/10/polymorphic-relationships.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vhglry/polymorphic_relationships","submitter_user":{"username":"dickdavis","created_at":"2018-12-26T12:39:28.000-06:00","is_admin":false,"about":"I'm into software development, baseball, and reading.","is_moderator":false,"karma":27,"avatar_url":"/avatars/dickdavis-100.png","invited_by_user":"mabynogy","github_username":"dickdavis"},"tags":["ruby"]},{"short_id":"yrn2et","short_id_url":"https://lobste.rs/s/yrn2et","created_at":"2023-07-10T13:50:52.000-05:00","title":"Assembly as a first programming language?","url":"","score":16,"flags":0,"comment_count":31,"description":"\u003cp\u003eI came across this book[1] and was intrigued by the premise. Has anyone learned assembly as a first programming language or known anyone who has?\u003c/p\u003e\n\u003cp\u003eI can imagine it working out well for certain students, but I don’t fully agree that it would make higher level languages easier as the author claims, or at least I have trouble imagining how it would. That said, I’m always grateful for my own experience with C as one of my first languages and exposure to explicit type declarations and pointers and memory management. But assembly is a different beast, involving a different paradigm altogether\u003c/p\u003e\n\u003cp\u003eInterested in hearing peoples experiences and/or thoughts on the pedagogical merits/anti-merits\u003c/p\u003e\n\u003cp\u003e[1] \u003ca href=\"https://link.springer.com/book/10.1007/978-1-4842-7437-8\" rel=\"ugc\"\u003ehttps://link.springer.com/book/10.1007/978-1-4842-7437-8\u003c/a\u003e\u003c/p\u003e\n","description_plain":"I came across this book[1] and was intrigued by the premise. Has anyone learned assembly as a first programming language or known anyone who has?\r\n\r\nI can imagine it working out well for certain students, but I don't fully agree that it would make higher level languages easier as the author claims, or at least I have trouble imagining how it would. That said, I'm always grateful for my own experience with C as one of my first languages and exposure to explicit type declarations and pointers and memory management. But assembly is a different beast, involving a different paradigm altogether \r\n\r\nInterested in hearing peoples experiences and/or thoughts on the pedagogical merits/anti-merits \r\n\r\n[1] https://link.springer.com/book/10.1007/978-1-4842-7437-8","comments_url":"https://lobste.rs/s/yrn2et/assembly_as_first_programming_language","submitter_user":{"username":"vector_spaces","created_at":"2020-01-28T00:07:17.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":234,"avatar_url":"/avatars/vector_spaces-100.png","invited_by_user":"bandali"},"tags":["ask","assembly"]},{"short_id":"s1h7oe","short_id_url":"https://lobste.rs/s/s1h7oe","created_at":"2023-07-11T10:48:30.000-05:00","title":"Generate from Constraints: Using Prompt-Hoisting for GPT-based Code Generation","url":"https://michaelfeathers.silvrback.com/prompt-hoisting-for-gpt-based-code-generation ","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/s1h7oe/generate_from_constraints_using_prompt","submitter_user":{"username":"mfeathers","created_at":"2017-10-30T10:30:24.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1253,"avatar_url":"/avatars/mfeathers-100.png","invited_by_user":"singpolyma"},"tags":["ai","formalmethods","practices","testing"]},{"short_id":"nsa1tj","short_id_url":"https://lobste.rs/s/nsa1tj","created_at":"2023-07-11T07:22:35.000-05:00","title":"Atuin's new encryption scheme","url":"https://atuin.sh/blog/new-encryption","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nsa1tj/atuin_s_new_encryption_scheme","submitter_user":{"username":"athaller","created_at":"2021-01-13T05:40:18.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":42,"avatar_url":"/avatars/athaller-100.png","invited_by_user":"mre"},"tags":["cryptography"]},{"short_id":"bc6wwc","short_id_url":"https://lobste.rs/s/bc6wwc","created_at":"2023-07-11T03:48:25.000-05:00","title":"aegraphs: Acyclic E-graphs for Efficient Optimization in a Production Compiler","url":"https://cfallin.org/pubs/egraphs2023_aegraphs_slides.pdf","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bc6wwc/aegraphs_acyclic_e_graphs_for_efficient","submitter_user":{"username":"sanxiyn","created_at":"2015-01-21T09:51:34.000-06:00","is_admin":false,"about":"I made the initial port of Rust to ARM and Android.","is_moderator":false,"karma":11266,"avatar_url":"/avatars/sanxiyn-100.png","invited_by_user":"steveklabnik","github_username":"sanxiyn","twitter_username":"sanxiyn"},"tags":["compilers","pdf","slides"]},{"short_id":"oml1ke","short_id_url":"https://lobste.rs/s/oml1ke","created_at":"2023-07-10T05:57:34.000-05:00","title":"What’s New in Thunderbird 115","url":"https://www.thunderbird.net/en-US/thunderbird/115.0/whatsnew/","score":35,"flags":0,"comment_count":16,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/oml1ke/what_s_new_thunderbird_115","submitter_user":{"username":"acatton","created_at":"2015-02-13T18:54:10.000-06:00","is_admin":false,"about":"I'm just a software engineer who likes his job.\r\n\r\nI'm currently a Site Reliability Engineer at Google, Inc.\r\n\r\n**Opinions are my own, and NOT the views of my current or past employers**","is_moderator":false,"karma":2590,"avatar_url":"/avatars/acatton-100.png","invited_by_user":"csantosb","github_username":"acatton"},"tags":["release"]},{"short_id":"hgsqun","short_id_url":"https://lobste.rs/s/hgsqun","created_at":"2023-07-11T11:40:31.000-05:00","title":"Fighting Rust Anxiety: Insights from a Go Developer, Navigating Rust Syntax Shenanigans","url":"https://arriqaaq.substack.com/p/fighting-rust-anxiety-insights-from","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hgsqun/fighting_rust_anxiety_insights_from_go","submitter_user":{"username":"bugsmith","created_at":"2023-04-21T08:58:57.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":377,"avatar_url":"/avatars/bugsmith-100.png","invited_by_user":"river"},"tags":["go","programming","rust"]},{"short_id":"hpusgg","short_id_url":"https://lobste.rs/s/hpusgg","created_at":"2023-07-11T05:00:19.000-05:00","title":"Roots of Trust are difficult","url":"https://mjg59.dreamwidth.org/66907.html","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hpusgg/roots_trust_are_difficult","submitter_user":{"username":"Foxboron","created_at":"2019-11-06T05:54:41.000-06:00","is_admin":false,"about":"F/OSS Developer and Arch Linux Developer doing packaging and security.\r\n\r\nInterested in Golang, development and supply chain security.","is_moderator":false,"karma":1732,"avatar_url":"/avatars/Foxboron-100.png","invited_by_user":"jelly","github_username":"Foxboron","twitter_username":"MortenLinderud"},"tags":["hardware","security"]},{"short_id":"o9bgcz","short_id_url":"https://lobste.rs/s/o9bgcz","created_at":"2023-07-10T20:56:17.000-05:00","title":"Back-end parallelism in the Rust compiler","url":"https://nnethercote.github.io/2023/07/11/back-end-parallelism-in-the-rust-compiler.html","score":9,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/o9bgcz/back_end_parallelism_rust_compiler","submitter_user":{"username":"msfjarvis","created_at":"2020-04-24T11:41:56.000-05:00","is_admin":false,"about":"Android and Kotlin developer, currently working for [Dyte](https://dyte.io/)","is_moderator":false,"karma":1112,"avatar_url":"/avatars/msfjarvis-100.png","invited_by_user":"Amolith","github_username":"msfjarvis","twitter_username":"msfjarvis"},"tags":["rust"]},{"short_id":"zemngq","short_id_url":"https://lobste.rs/s/zemngq","created_at":"2023-07-11T05:47:37.000-05:00","title":"What is Functional Programming?","url":"https://joseph.yiasemides.com/posts/what-is-functional-programming","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zemngq/what_is_functional_programming","submitter_user":{"username":"Dzol","created_at":"2016-08-02T15:16:49.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":2,"avatar_url":"/avatars/Dzol-100.png","invited_by_user":"elbrujohalcon","github_username":"Dzol"},"tags":["elixir","javascript","programming"]},{"short_id":"jfjzyp","short_id_url":"https://lobste.rs/s/jfjzyp","created_at":"2023-07-10T06:21:28.000-05:00","title":"Factor: a practical stack language","url":"https://factorcode.org","score":47,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jfjzyp/factor_practical_stack_language","submitter_user":{"username":"Drakonis","created_at":"2016-09-05T12:37:08.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":215,"avatar_url":"/avatars/Drakonis-100.png","invited_by_user":"albino"},"tags":["programming"]},{"short_id":"tjuuf5","short_id_url":"https://lobste.rs/s/tjuuf5","created_at":"2023-07-10T08:23:22.000-05:00","title":"Firefox address bar tips","url":"https://wiki.tilde.institute/w/firefox-address-bar-tips","score":21,"flags":0,"comment_count":11,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tjuuf5/firefox_address_bar_tips","submitter_user":{"username":"phoebos","created_at":"2022-06-23T18:26:25.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":507,"avatar_url":"/avatars/phoebos-100.png","invited_by_user":"neauoire"},"tags":["browsers"]},{"short_id":"7lmn0y","short_id_url":"https://lobste.rs/s/7lmn0y","created_at":"2023-07-10T14:20:33.000-05:00","title":"Usability of modern solutions for logs' analysis and debugging is totally screwed","url":"","score":10,"flags":0,"comment_count":16,"description":"\u003cp\u003eWhy we generate and collect logs? Mostly for further analysis and debugging. For example:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTo find all the error logs with a particular substring in them, and then to inspect them visually.\u003c/li\u003e\n\u003cli\u003eTo find logs for the particular request_id, user_id or trace_id and then to inspect them visually.\u003c/li\u003e\n\u003cli\u003eTo calculate the number of successful/unsuccessful hacker attempts to SSH into your host.\u003c/li\u003e\n\u003cli\u003eTo calculate stats over web logs for a particular ip, domain, etc.\u003c/li\u003e\n\u003cli\u003eTo calculate the frequency of logs with particular substrings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAll these tasks are easy to perform from command-line when logs are stored in plain files. Just start with \u003ccode\u003ecat /path/to/log | grep some-substring\u003c/code\u003e. Then iteratively apply the needed commands to the selected logs - \u003ccode\u003ewc\u003c/code\u003e, \u003ccode\u003eawk\u003c/code\u003e, more \u003ccode\u003egrep\u003c/code\u003e, \u003ccode\u003eless\u003c/code\u003e, \u003ccode\u003ehead\u003c/code\u003e, \u003ccode\u003esort\u003c/code\u003e, \u003ccode\u003euniq\u003c/code\u003e, \u003ccode\u003ecut\u003c/code\u003e, etc. - until the desired result is obtained. This approach serves great for analyzing locally stored logs on a few hosts. It doesn’t scale well for cases when logs should be analyzed across hundreds of hosts and/or  application instances. Of course, there are command-line tools for parallel execution of unix commands across hundreds of hosts, which can help with this case. But we wanted better solution.\u003c/p\u003e\n\u003cp\u003eSo we’ve got ElasticSearch and Grafana Loki. Both solutions allow collecting logs from hundreds of hosts/applications. But they totally screw up analysis of these logs. They provide awkward to use query languages with silly limitations (such as the number of returned log lines per query) and very limited integration with existing command-line tools for logs’ analysis mentioned above. For example, you cannot easily perform the equivalent of \u003ccode\u003ecat /log/file | grep some-string | my-custom-script-for-analysis\u003c/code\u003e when logs stored in ElasticSearch and Grafana Loki contain millions or billions of lines with \u003ccode\u003esome-string\u003c/code\u003e substring.\u003c/p\u003e\n\u003cp\u003eElasticSearch and Loki also need non-trivial configuration, index creation, performance tuning and maintenance. Do we really want paying this price in exchange to get an awkward ability to analyze logs collected from hundreds of hosts/applications?\u003c/p\u003e\n\u003cp\u003eProbably, it is time to use better solution, which allows collecting logs from hundreds of sources and then analyzing them with good old command-line tools in the usual ergonomic way? This question was raised many times when I had to analyze logs with modern solutions for logs. I couldn’t find the proper solution, so decided creating it on my own based on my experience with creating VictoriaMetrics. So I created open-source user-friendly database for logs - \u003ca href=\"https://docs.victoriametrics.com/VictoriaLogs/\" rel=\"ugc\"\u003eVictoriaLogs\u003c/a\u003e. It accepts structured and unstructured logs from popular log shippers such as Filebeat, Fluentbit, Logstash, Vector, etc., it supports fast full-text search without any configuration / tuning, and it has perfect integration with good old command-line tools. Read more about the integration \u003ca href=\"https://docs.victoriametrics.com/VictoriaLogs/querying/#command-line\" rel=\"ugc\"\u003ehere\u003c/a\u003e. Give it a try and share your experience!\u003c/p\u003e\n","description_plain":"Why we generate and collect logs? Mostly for further analysis and debugging. For example:\r\n\r\n- To find all the error logs with a particular substring in them, and then to inspect them visually.\r\n- To find logs for the particular request_id, user_id or trace_id and then to inspect them visually.\r\n- To calculate the number of successful/unsuccessful hacker attempts to SSH into your host.\r\n- To calculate stats over web logs for a particular ip, domain, etc.\r\n- To calculate the frequency of logs with particular substrings.\r\n\r\nAll these tasks are easy to perform from command-line when logs are stored in plain files. Just start with `cat /path/to/log | grep some-substring`. Then iteratively apply the needed commands to the selected logs - `wc`, `awk`, more `grep`, `less`, `head`, `sort`, `uniq`, `cut`, etc. - until the desired result is obtained. This approach serves great for analyzing locally stored logs on a few hosts. It doesn't scale well for cases when logs should be analyzed across hundreds of hosts and/or  application instances. Of course, there are command-line tools for parallel execution of unix commands across hundreds of hosts, which can help with this case. But we wanted better solution.\r\n\r\nSo we've got ElasticSearch and Grafana Loki. Both solutions allow collecting logs from hundreds of hosts/applications. But they totally screw up analysis of these logs. They provide awkward to use query languages with silly limitations (such as the number of returned log lines per query) and very limited integration with existing command-line tools for logs' analysis mentioned above. For example, you cannot easily perform the equivalent of `cat /log/file | grep some-string | my-custom-script-for-analysis` when logs stored in ElasticSearch and Grafana Loki contain millions or billions of lines with `some-string` substring.\r\n\r\nElasticSearch and Loki also need non-trivial configuration, index creation, performance tuning and maintenance. Do we really want paying this price in exchange to get an awkward ability to analyze logs collected from hundreds of hosts/applications?\r\n\r\nProbably, it is time to use better solution, which allows collecting logs from hundreds of sources and then analyzing them with good old command-line tools in the usual ergonomic way? This question was raised many times when I had to analyze logs with modern solutions for logs. I couldn't find the proper solution, so decided creating it on my own based on my experience with creating VictoriaMetrics. So I created open-source user-friendly database for logs - [VictoriaLogs](https://docs.victoriametrics.com/VictoriaLogs/). It accepts structured and unstructured logs from popular log shippers such as Filebeat, Fluentbit, Logstash, Vector, etc., it supports fast full-text search without any configuration / tuning, and it has perfect integration with good old command-line tools. Read more about the integration [here](https://docs.victoriametrics.com/VictoriaLogs/querying/#command-line). Give it a try and share your experience!","comments_url":"https://lobste.rs/s/7lmn0y/usability_modern_solutions_for_logs","submitter_user":{"username":"valyala","created_at":"2020-01-26T16:58:51.000-06:00","is_admin":false,"about":"CTO at VictoriaMetrics, creator of VictoriaLogs","is_moderator":false,"karma":18,"avatar_url":"/avatars/valyala-100.png","invited_by_user":"bilinguliar","github_username":"valyala"},"tags":["devops"]}]