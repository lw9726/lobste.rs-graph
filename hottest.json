[{"short_id":"uu46e2","short_id_url":"https://lobste.rs/s/uu46e2","created_at":"2023-03-20T10:37:10.000-05:00","title":"vore - a simple rss/atom feed reader","url":"https://vore.website","score":35,"flags":0,"comment_count":16,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/uu46e2/vore_simple_rss_atom_feed_reader","submitter_user":{"username":"j3s","created_at":"2019-11-21T23:38:10.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":582,"avatar_url":"/avatars/j3s-100.png","invited_by_user":"Misch"},"tags":["web"]},{"short_id":"zx4xzz","short_id_url":"https://lobste.rs/s/zx4xzz","created_at":"2023-03-21T01:27:59.000-05:00","title":"Twenty-five years of curl","url":"https://daniel.haxx.se/blog/2023/03/20/twenty-five-years-of-curl/","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zx4xzz/twenty_five_years_curl","submitter_user":{"username":"ciprian_craciun","created_at":"2022-02-14T13:47:43.000-06:00","is_admin":false,"about":"IT enthusiast, from programming to operating systems, from networking to cryptography, from cloud to hardware, from Erlang to Java.","is_moderator":false,"karma":883,"avatar_url":"/avatars/ciprian_craciun-100.png","invited_by_user":"syn-ack"},"tags":["historical"]},{"short_id":"hbi9hx","short_id_url":"https://lobste.rs/s/hbi9hx","created_at":"2023-03-21T00:02:57.000-05:00","title":"Gitea 1.19.0 is released","url":"https://blog.gitea.io/2023/03/gitea-1.19.0-is-released/","score":7,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hbi9hx/gitea_1_19_0_is_released","submitter_user":{"username":"raymii","created_at":"2013-11-20T11:58:43.000-06:00","is_admin":false,"about":"üêã\r\nhttps://raymii.org","is_moderator":false,"karma":20008,"avatar_url":"/avatars/raymii-100.png","invited_by_user":"journeysquid"},"tags":["go","release","vcs"]},{"short_id":"cbl1yc","short_id_url":"https://lobste.rs/s/cbl1yc","created_at":"2023-03-20T06:44:55.000-05:00","title":"One does not simply use GHCup on macOS M1","url":"https://robertwpearce.com/one-does-not-simply-use-ghcup-on-macos-m1.html","score":11,"flags":0,"comment_count":14,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/cbl1yc/one_does_not_simply_use_ghcup_on_macos_m1","submitter_user":{"username":"robertwpearce","created_at":"2017-04-19T00:26:43.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":102,"avatar_url":"/avatars/robertwpearce-100.png","invited_by_user":"BruceM","github_username":"rpearce"},"tags":["haskell"]},{"short_id":"tzjlkx","short_id_url":"https://lobste.rs/s/tzjlkx","created_at":"2023-03-20T10:51:42.000-05:00","title":"Paving the Road to Vulkan on Asahi Linux","url":"https://asahilinux.org/2023/03/road-to-vulkan/","score":21,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tzjlkx/paving_road_vulkan_on_asahi_linux","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":96170,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["graphics","linux","mac"]},{"short_id":"gmjekk","short_id_url":"https://lobste.rs/s/gmjekk","created_at":"2023-03-20T06:22:56.000-05:00","title":"a world to win: webassembly for the rest of us","url":"https://wingolog.org/archives/2023/03/20/a-world-to-win-webassembly-for-the-rest-of-us","score":24,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gmjekk/world_win_webassembly_for_rest_us","submitter_user":{"username":"jakob","created_at":"2018-03-02T15:45:42.000-06:00","is_admin":false,"about":"Website: \u003chttp://jakob.space\u003e\r\n\r\nMastodon: \u003chttps://mastodon.sdf.org/@jakob\u003e","is_moderator":false,"karma":857,"avatar_url":"/avatars/jakob-100.png","invited_by_user":"calvin","github_username":"TsarFox"},"tags":["lisp","wasm"]},{"short_id":"lriqkx","short_id_url":"https://lobste.rs/s/lriqkx","created_at":"2023-03-20T12:28:08.000-05:00","title":"One trick to build a TLS-enabled IPv6-only empire with only ONE legacy IP","url":"https://ryan.lahfa.xyz/en/one-trick-to-build-a-tls-enabled-ipv6-only-empire-with-only-one-legacy-ip.html","score":11,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lriqkx/one_trick_build_tls_enabled_ipv6_only","submitter_user":{"username":"matthewcroughan","created_at":"2022-08-01T09:33:38.000-05:00","is_admin":false,"about":"lobste.rs is not real life.\r\n\r\nRuns Nix.Camp and Nix.How","is_moderator":false,"karma":79,"avatar_url":"/avatars/matthewcroughan-100.png","invited_by_user":"toastal","github_username":"MatthewCroughan","twitter_username":"MatthewCroughan"},"tags":["networking","nix"]},{"short_id":"9fbnlv","short_id_url":"https://lobste.rs/s/9fbnlv","created_at":"2023-03-21T03:25:02.000-05:00","title":"Github Actions and Go","url":"https://olegk.dev/github-actions-and-go","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/9fbnlv/github_actions_go","submitter_user":{"username":"olegkovalov","created_at":"2016-11-29T10:10:37.000-06:00","is_admin":false,"about":"Software engineer. Mostly Go. Love open source. https://telegram.me/olegkovalov","is_moderator":false,"karma":209,"avatar_url":"/avatars/olegkovalov-100.png","invited_by_user":"outcoldman","github_username":"cristaloleg","twitter_username":"oleg_kovalov","keybase_signatures":[{"kb_username":"olegkovalov","sig_hash":"f5ff2640892cb70eb25120b6c23ec2d468eb62d4d665820e3b2da018235fdaac0f"}]},"tags":["go"]},{"short_id":"kafimv","short_id_url":"https://lobste.rs/s/kafimv","created_at":"2023-03-20T04:14:47.000-05:00","title":"curl 8.0.0 is here","url":"https://daniel.haxx.se/blog/2023/03/20/curl-8-0-0-is-here/","score":31,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kafimv/curl_8_0_0_is_here","submitter_user":{"username":"j11g","created_at":"2017-07-17T09:39:28.000-05:00","is_admin":false,"about":"I am Jan van den Berg (numeronym: j11g). \r\n\r\nI blog here https://j11g.com (English) \r\n\r\nand here https://janvandenberg.blog (Dutch)","is_moderator":false,"karma":5293,"avatar_url":"/avatars/j11g-100.png","invited_by_user":"mischa","twitter_username":"loginn"},"tags":["release"]},{"short_id":"abjy9x","short_id_url":"https://lobste.rs/s/abjy9x","created_at":"2023-03-20T23:09:22.000-05:00","title":"An aperiodic monotile","url":"https://arxiv.org/pdf/2303.10798.pdf","score":4,"flags":0,"comment_count":0,"description":"\u003cp\u003eA longstanding open problem asks for an aperiodic monotile, also known as an ‚Äúeinstein‚Äù: a shape that admits tilings of the plane, but never periodic tilings. We answer this problem for topological disk tiles by exhibiting a continuum of combinatorially equivalent aperiodic polygons. We first show that a representative example, the ‚Äúhat‚Äù polykite, can form clusters called ‚Äúmetatiles‚Äù, for which substitution rules can be defined. Because the metatiles admit tilings of the plane, so too does the hat. We then prove that generic members of our continuum of polygons are aperiodic, through a new kind of geometric incommensurability argument. Separately, we give a combinatorial, computer-assisted proof that the hat must form hierarchical ‚Äì and hence aperiodic ‚Äì tilings.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://arxiv.org/abs/2303.10798\" rel=\"ugc\"\u003earXiv\u003c/a\u003e\u003c/p\u003e\n","description_plain":"A longstanding open problem asks for an aperiodic monotile, also known as an \"einstein\": a shape that admits tilings of the plane, but never periodic tilings. We answer this problem for topological disk tiles by exhibiting a continuum of combinatorially equivalent aperiodic polygons. We first show that a representative example, the \"hat\" polykite, can form clusters called \"metatiles\", for which substitution rules can be defined. Because the metatiles admit tilings of the plane, so too does the hat. We then prove that generic members of our continuum of polygons are aperiodic, through a new kind of geometric incommensurability argument. Separately, we give a combinatorial, computer-assisted proof that the hat must form hierarchical -- and hence aperiodic -- tilings. \r\n\r\n[arXiv](https://arxiv.org/abs/2303.10798)","comments_url":"https://lobste.rs/s/abjy9x/aperiodic_monotile","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":96170,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["math","pdf"]},{"short_id":"oukd0w","short_id_url":"https://lobste.rs/s/oukd0w","created_at":"2023-03-20T06:17:28.000-05:00","title":"Betraying vim for the IDEs of March","url":"https://ntietz.com/blog/betraying-vim-ides-of-march/","score":15,"flags":0,"comment_count":8,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/oukd0w/betraying_vim_for_ides_march","submitter_user":{"username":"carlmjohnson","created_at":"2021-07-19T11:55:18.000-05:00","is_admin":false,"about":"Carl M. Johnson is a philosopher and programmer, currently employed as the Director of Technology for Spotlight PA.","is_moderator":false,"karma":8919,"avatar_url":"/avatars/carlmjohnson-100.png","invited_by_user":"peterbourgon","github_username":"carlmjohnson","twitter_username":"carlmjohnson"},"tags":["practices","vim"]},{"short_id":"dgnbim","short_id_url":"https://lobste.rs/s/dgnbim","created_at":"2023-03-20T16:06:19.000-05:00","title":"Notes on FFTs: for users","url":"https://fgiesen.wordpress.com/2023/03/19/notes-on-ffts-for-users/","score":7,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dgnbim/notes_on_ffts_for_users","submitter_user":{"username":"calvin","created_at":"2014-07-01T06:47:13.000-05:00","is_admin":false,"about":"Soon we will all have special names... names designed to make the cathode ray tube resonate.\r\n\r\nDavid Chisnall stan account.","is_moderator":false,"karma":96170,"avatar_url":"/avatars/calvin-100.png","invited_by_user":"nbyouri","github_username":"NattyNarwhal"},"tags":["programming"]},{"short_id":"kwulck","short_id_url":"https://lobste.rs/s/kwulck","created_at":"2023-03-20T06:56:22.000-05:00","title":"cargo-limit: Cargo with less noise: warnings are skipped until errors are fixed","url":"https://github.com/alopatindev/cargo-limit","score":19,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kwulck/cargo_limit_cargo_with_less_noise","submitter_user":{"username":"adaszko","created_at":"2015-02-03T15:01:47.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":1281,"avatar_url":"/avatars/adaszko-100.png","invited_by_user":"bobbywilson0"},"tags":["rust"]},{"short_id":"nfc9ga","short_id_url":"https://lobste.rs/s/nfc9ga","created_at":"2023-03-19T20:08:33.000-05:00","title":"What Nix Can Do","url":"https://youtu.be/6Le0IbPRzOE","score":30,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nfc9ga/what_nix_can_do","submitter_user":{"username":"matthewcroughan","created_at":"2022-08-01T09:33:38.000-05:00","is_admin":false,"about":"lobste.rs is not real life.\r\n\r\nRuns Nix.Camp and Nix.How","is_moderator":false,"karma":79,"avatar_url":"/avatars/matthewcroughan-100.png","invited_by_user":"toastal","github_username":"MatthewCroughan","twitter_username":"MatthewCroughan"},"tags":["nix","unix","video"]},{"short_id":"plmk9r","short_id_url":"https://lobste.rs/s/plmk9r","created_at":"2023-03-20T01:08:33.000-05:00","title":"New Names for the Oil project and \"Oil Shell\"?","url":"","score":18,"flags":1,"comment_count":80,"description":"\u003cp\u003eSome people expressed dislike for the ‚ÄúOils for Unix‚Äù name in the recent release:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://lobste.rs/s/qrbcue/oil_0_14_2_interactive_shell_conceding\" rel=\"ugc\"\u003ehttps://lobste.rs/s/qrbcue/oil_0_14_2_interactive_shell_conceding\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe reasons for renaming it are:\u003c/p\u003e\n\u003cp\u003e(1) OSH vs. Oil isn‚Äôt distinct enough; readers are noticeably confused\u003c/p\u003e\n\u003cp\u003e‚ÄúOSH‚Äù is naturally taken to be a synonym for ‚ÄúOil Shell‚Äù, when really we have two different symlinks to the same binary ‚Äì \u003ccode\u003ebin/osh\u003c/code\u003e and \u003ccode\u003ebin/oil\u003c/code\u003e ‚Äì  which behave differently\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/usr/local/bin/\n  oils-for-unix  # real binary, like busybox\n  osh -\u0026gt; oils-for-unix  # symlink\n  ysh -\u0026gt; oils-for-unix  # symlink (formerly oil, not distinct enough)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eImportant: please read this page for the relationship between the 2 symlinks.  That is important so that the naming suggestions reflect the reality of what the project is (which is pretty mature by now)\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/oilshell/oil/wiki/OSH-versus-Oil\" rel=\"ugc\"\u003ehttps://github.com/oilshell/oil/wiki/OSH-versus-Oil\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e(2) The project now has parts that aren‚Äôt ‚Äúshells‚Äù\u003c/p\u003e\n\u003cp\u003eIncluding data languages like \u003ca href=\"https://www.oilshell.org/release/latest/doc/qsn.html\" rel=\"ugc\"\u003eQSN\u003c/a\u003e (which will move toward JSON)\u003c/p\u003e\n\u003cp\u003e(3) People who encounter the project for the first time often feel a bad connotation of ‚ÄúOil‚Äù and ‚ÄúOil Shell‚Äù, explained in the release comments thread\u003c/p\u003e\n\u003cp\u003e(4) There are existing ‚Äúoil‚Äù and ‚Äúoilshell‚Äù packages in some distros of the Python reference implementation.\u003c/p\u003e\n\u003cp\u003eI‚Äôd like to standardize on ‚Äúoils-for-unix‚Äù for the new C++ implementation.  The C++ one shouldn‚Äôt overwrite the Python one suddenly ‚Äì there should be a gradual transition where both are available.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eI‚Äôd like the solicit alternatives for the name, and here are some desirable properties.\u003c/p\u003e\n\u003cp\u003eI‚Äôd like a name that is globally unique, hence the somewhat long ‚ÄúOils for Unix‚Äù name.    (But you don‚Äôt generally type that name ‚Äì you would type \u003ccode\u003eosh\u003c/code\u003e or \u003ccode\u003eysh\u003c/code\u003e.)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehttp://www.$PROJECT_NAME.org\n\nhttp://www.$PROJECT_NAME.org/download/$PROJECT_NAME-$version.tar.gz\n\n$PROJECT_NAME.zulipchat.com/\n\nsudo apt-get $PROJECT_NAME  -- and 10 other distros!!\n\n/usr/local/bin/$PROJECT_NAME\n\ngithub.com/$PROJECT_NAME\n\ntwitter.com/$PROJECT_NAME\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe thing that sealed the deal for me is that if you Google (or Bing) ‚ÄúOils for Unix‚Äù now, it ALREADY points to \u003ca href=\"https://www.oilshell.org/\" rel=\"ugc\"\u003ehttps://www.oilshell.org/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eIt‚Äôs a renaming without much of the pain and cost of renaming (although there‚Äôs still some).  I made a new Mastodon account \u003ca href=\"https://hachyderm.io/@oilsforunix\" rel=\"ugc\"\u003ehttps://hachyderm.io/@oilsforunix\u003c/a\u003e  and nobody noticed that it wasn‚Äôt called ‚Äúoilshell‚Äù.  It‚Äôs already a synonym\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eThere was a thread back in August about the new name, on both Zulip and Reddit:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://oilshell.zulipchat.com/#narrow/stream/325160-oil-discuss-public/topic/New.20Names.20.2F.20Renaming.3F\" rel=\"ugc\"\u003ehttps://oilshell.zulipchat.com/#narrow/stream/325160-oil-discuss-public/topic/New.20Names.20.2F.20Renaming.3F\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Some people expressed dislike for the \"Oils for Unix\" name in the recent release:\r\n\r\nhttps://lobste.rs/s/qrbcue/oil_0_14_2_interactive_shell_conceding\r\n\r\nThe reasons for renaming it are:\r\n\r\n(1) OSH vs. Oil isn't distinct enough; readers are noticeably confused\r\n\r\n\"OSH\" is naturally taken to be a synonym for \"Oil Shell\", when really we have two different symlinks to the same binary -- `bin/osh` and `bin/oil` --  which behave differently\r\n\r\n```\r\n/usr/local/bin/\r\n  oils-for-unix  # real binary, like busybox\r\n  osh -\u003e oils-for-unix  # symlink\r\n  ysh -\u003e oils-for-unix  # symlink (formerly oil, not distinct enough)\r\n```\r\n\r\nImportant: please read this page for the relationship between the 2 symlinks.  That is important so that the naming suggestions reflect the reality of what the project is (which is pretty mature by now)\r\n\r\nhttps://github.com/oilshell/oil/wiki/OSH-versus-Oil\r\n\r\n\r\n(2) The project now has parts that aren't \"shells\"\r\n\r\nIncluding data languages like [QSN](https://www.oilshell.org/release/latest/doc/qsn.html) (which will move toward JSON)\r\n\r\n(3) People who encounter the project for the first time often feel a bad connotation of \"Oil\" and \"Oil Shell\", explained in the release comments thread\r\n\r\n(4) There are existing \"oil\" and \"oilshell\" packages in some distros of the Python reference implementation.\r\n\r\nI'd like to standardize on \"oils-for-unix\" for the new C++ implementation.  The C++ one shouldn't overwrite the Python one suddenly -- there should be a gradual transition where both are available.\r\n\r\n----\r\n\r\nI'd like the solicit alternatives for the name, and here are some desirable properties.\r\n\r\nI'd like a name that is globally unique, hence the somewhat long \"Oils for Unix\" name.    (But you don't generally type that name -- you would type `osh` or `ysh`.)\r\n\r\n```\r\nhttp://www.$PROJECT_NAME.org\r\n\r\nhttp://www.$PROJECT_NAME.org/download/$PROJECT_NAME-$version.tar.gz\r\n\r\n$PROJECT_NAME.zulipchat.com/\r\n\r\nsudo apt-get $PROJECT_NAME  -- and 10 other distros!!\r\n\r\n/usr/local/bin/$PROJECT_NAME\r\n\r\ngithub.com/$PROJECT_NAME\r\n\r\ntwitter.com/$PROJECT_NAME\r\n```\r\n\r\nThe thing that sealed the deal for me is that if you Google (or Bing) \"Oils for Unix\" now, it ALREADY points to https://www.oilshell.org/\r\n\r\nIt's a renaming without much of the pain and cost of renaming (although there's still some).  I made a new Mastodon account https://hachyderm.io/@oilsforunix  and nobody noticed that it wasn't called \"oilshell\".  It's already a synonym\r\n\r\n---\r\n\r\nThere was a thread back in August about the new name, on both Zulip and Reddit:\r\n\r\nhttps://oilshell.zulipchat.com/#narrow/stream/325160-oil-discuss-public/topic/New.20Names.20.2F.20Renaming.3F","comments_url":"https://lobste.rs/s/plmk9r/new_names_for_oil_project_oil_shell","submitter_user":{"username":"andyc","created_at":"2016-11-29T12:37:37.000-06:00","is_admin":false,"about":"Working on http://www.oilshell.org/\r\n","is_moderator":false,"karma":8557,"avatar_url":"/avatars/andyc-100.png","invited_by_user":"flyingfisch"},"tags":["ask","unix"]},{"short_id":"ozsdjz","short_id_url":"https://lobste.rs/s/ozsdjz","created_at":"2023-03-20T19:08:45.000-05:00","title":"Launch OpenBSD vmd Guests on Demand from SSH","url":"https://jonwillia.ms/2023/03/20/vmctl-ssh","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ozsdjz/launch_openbsd_vmd_guests_on_demand_from","submitter_user":{"username":"wizardishungry","created_at":"2018-08-13T10:39:55.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1121,"avatar_url":"/avatars/wizardishungry-100.png","invited_by_user":"kusuriya","github_username":"WIZARDISHUNGRY","twitter_username":"WIZARDISHUNGRY","keybase_signatures":[{"kb_username":"wizardishungry","sig_hash":"c5e8c0f01d3e047b18f748ada5a8201b2cce3bf5bb2477ec7d404b1c99a5d94b0f"}]},"tags":["openbsd","virtualization"]},{"short_id":"gbckpo","short_id_url":"https://lobste.rs/s/gbckpo","created_at":"2023-03-20T05:54:38.000-05:00","title":"What are you doing this week?","url":"","score":10,"flags":0,"comment_count":10,"description":"\u003cp\u003eWhat are you doing this week? Feel free to share!\u003c/p\u003e\n\u003cp\u003eKeep in mind it‚Äôs OK to do nothing at all, too.\u003c/p\u003e\n","description_plain":"What are you doing this week? Feel free to share!\r\n\r\nKeep in mind it‚Äôs OK to do nothing at all, too.","comments_url":"https://lobste.rs/s/gbckpo/what_are_you_doing_this_week","submitter_user":{"username":"caius","created_at":"2014-05-13T06:58:30.000-05:00","is_admin":false,"about":"Compulsive Geek, Ale Connoisseur, Occasionally Responsible Adult.","is_moderator":false,"karma":8706,"avatar_url":"/avatars/caius-100.png","invited_by_user":"lauris","github_username":"caius","twitter_username":"Caius"},"tags":["ask","programming"]},{"short_id":"3gmwz1","short_id_url":"https://lobste.rs/s/3gmwz1","created_at":"2023-03-20T11:59:38.000-05:00","title":"Bind before connect","url":"https://idea.popcount.org/2014-04-03-bind-before-connect/","score":5,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/3gmwz1/bind_before_connect","submitter_user":{"username":"friendlysock","created_at":"2014-02-20T00:43:41.000-06:00","is_admin":false,"about":"*Literally* full of ants.\r\n\r\nFriendly engineer and human being.\r\n\r\nStrong opinions held weakly, sometimes weekly.\r\n\r\n\u003e Gentrification is the process by which nebulous threats are pacified and alchemised into money. \r\n","is_moderator":false,"karma":39669,"avatar_url":"/avatars/friendlysock-100.png","invited_by_user":"MasonJar"},"tags":["networking"]},{"short_id":"rldctv","short_id_url":"https://lobste.rs/s/rldctv","created_at":"2023-03-21T04:06:37.000-05:00","title":"What caused Discord to switch from Go to Rust?","url":"","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eNOTE: This was one of the factors that led Discord to change from Go to Rust.\nRead States\u003c/p\u003e\n\u003cp\u003eRead States is the service that was moved from Go to Rust. Its primary function is to record the channels and messages we have read. Every time we sign in to Discord, send a message, and read a message, Read States is accessed.To put it simple, Read States is on a hot road. Therefore, Incredible speed and minimal latency are required for Read States service.\u003c/p\u003e\n\u003cp\u003eDiscord is a communication platform with billions of read states for users and channels. However, there is only one read state that holds various counters, such as the number of mentions in a channel. These counters must be updated atomically and often reset to 0. To achieve this, each read state service maintains a LRU (least recently used) cache of read states, allowing for fast atomic counter updates. Each cache has millions of users and tons of millions of read states, with cache modifications occurring hundreds of thousands of times each second. This caching strategy helps to efficiently manage and update the vast amount of read states on Discord.\u003c/p\u003e\n\u003cp\u003eBefore moving forward let‚Äôs now talk on how RUST and GO manage their memories.\nMemory management in Go\u003c/p\u003e\n\u003cp\u003eMemory is not instantly released in Go upon cache key eviction.Instead, every so often, the garbage collector runs to discover any memory that has no references and releases it. In other words, memory hangs out until the garbage collector can assess if it is genuinely out of use, rather than releasing immediately once it is no longer needed.The amount of effort Go must undertake to figure out what memory is free during garbage collection might cause the application to lag. Go will require garbage pickups to occur at least every two minutes.In other words, regardless of heap growth, go will still trigger a garbage collection if it has not run for 2 minutes.\nMemory management in Rust\u003c/p\u003e\n\u003cp\u003eWith no runtime or garbage collector, Rust is amazingly quick and memory-efficient. It can power performance-critical applications, run on embedded devices, and interface with other languages with ease. Rust implements memory ‚Äúownership‚Äù as part of a rather novel approach to memory management. Rust essentially keeps track of who is able to read from and write to memory. It is aware of when an application is utilizing memory and instantly releases it when no longer required. Runtime memory problems are practically hard to have since it enforces memory restrictions at build time.You don‚Äôt have to manually manage your memory.The compiler handles it for you. So, in the Rust version of the Read States service, a user‚Äôs Read State is instantly released from memory when it is removed from the LRU (least recently used) cache.\u003c/p\u003e\n\u003cp\u003eThe read state memory doesn‚Äôt wait for the garbage collector to pick it up. Rust promptly releases it because it is no longer needed.No runtime process checks if it needs to be released.\u003c/p\u003e\n\u003cp\u003eurl to original blog\n\u003ca href=\"https://thelegion.tech/posts/hugo-coder-wiki/\" rel=\"ugc\"\u003ehttps://thelegion.tech/posts/hugo-coder-wiki/\u003c/a\u003e\u003c/p\u003e\n","description_plain":"NOTE: This was one of the factors that led Discord to change from Go to Rust.\r\nRead States\r\n\r\nRead States is the service that was moved from Go to Rust. Its primary function is to record the channels and messages we have read. Every time we sign in to Discord, send a message, and read a message, Read States is accessed.To put it simple, Read States is on a hot road. Therefore, Incredible speed and minimal latency are required for Read States service.\r\n\r\nDiscord is a communication platform with billions of read states for users and channels. However, there is only one read state that holds various counters, such as the number of mentions in a channel. These counters must be updated atomically and often reset to 0. To achieve this, each read state service maintains a LRU (least recently used) cache of read states, allowing for fast atomic counter updates. Each cache has millions of users and tons of millions of read states, with cache modifications occurring hundreds of thousands of times each second. This caching strategy helps to efficiently manage and update the vast amount of read states on Discord.\r\n\r\nBefore moving forward let's now talk on how RUST and GO manage their memories.\r\nMemory management in Go\r\n\r\nMemory is not instantly released in Go upon cache key eviction.Instead, every so often, the garbage collector runs to discover any memory that has no references and releases it. In other words, memory hangs out until the garbage collector can assess if it is genuinely out of use, rather than releasing immediately once it is no longer needed.The amount of effort Go must undertake to figure out what memory is free during garbage collection might cause the application to lag. Go will require garbage pickups to occur at least every two minutes.In other words, regardless of heap growth, go will still trigger a garbage collection if it has not run for 2 minutes.\r\nMemory management in Rust\r\n\r\nWith no runtime or garbage collector, Rust is amazingly quick and memory-efficient. It can power performance-critical applications, run on embedded devices, and interface with other languages with ease. Rust implements memory \"ownership\" as part of a rather novel approach to memory management. Rust essentially keeps track of who is able to read from and write to memory. It is aware of when an application is utilizing memory and instantly releases it when no longer required. Runtime memory problems are practically hard to have since it enforces memory restrictions at build time.You don't have to manually manage your memory.The compiler handles it for you. So, in the Rust version of the Read States service, a user's Read State is instantly released from memory when it is removed from the LRU (least recently used) cache.\r\n\r\nThe read state memory doesn't wait for the garbage collector to pick it up. Rust promptly releases it because it is no longer needed.No runtime process checks if it needs to be released.\r\n\r\nurl to original blog\r\nhttps://thelegion.tech/posts/hugo-coder-wiki/","comments_url":"https://lobste.rs/s/rldctv/what_caused_discord_switch_from_go_rust","submitter_user":{"username":"sid1729","created_at":"2023-03-21T03:33:59.000-05:00","is_admin":false,"about":"Hi! am siddharth, i am a computer science enthusiast, I love solving interesting problems with computers and programming. Primarily interested in algorithms , data structures Design patterns, principles, databases, and large-scale systems Back-end technologies.","is_moderator":false,"karma":0,"avatar_url":"/avatars/sid1729-100.png","invited_by_user":"shivekkhurana"},"tags":["go","rust"]},{"short_id":"4rl4rv","short_id_url":"https://lobste.rs/s/4rl4rv","created_at":"2023-03-21T04:03:08.000-05:00","title":"Minimal website in hugo","url":"","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003e\u003ca href=\"https://thelegion.tech/\" rel=\"ugc\"\u003ehttps://thelegion.tech/\u003c/a\u003e\nIntroduction\nHugo is a popular open-source static site generator that allows you to create fast and efficient websites with ease. With its simplicity and flexibility, Hugo has become a popular choice for developers to build their personal websites and portfolios. In this post, we will explore how to create a personal portfolio using Hugo.\u003c/p\u003e\n\u003cp\u003eSetting up Hugo\nBefore getting started with creating a personal portfolio, you need to set up Hugo on your machine. You can download Hugo from its official website and install it according to your operating system. Once installed, you can create a new site by running the following command in your terminal:\u003c/p\u003e\n\u003cp\u003ejavascript\u003c/p\u003e\n\u003cp\u003ehugo new site your-site-name\u003c/p\u003e\n\u003cp\u003eCreating your portfolio\nOnce you have set up Hugo, you can start creating your personal portfolio. The first step is to choose a theme for your website. There are plenty of Hugo themes available on the internet, and you can choose one that suits your needs. You can download the theme of your choice and add it to the ‚Äúthemes‚Äù directory of your Hugo site.\u003c/p\u003e\n\u003cp\u003eAfter downloading the theme, you can configure your website by creating a configuration file. This file contains all the necessary information about your website, such as the site title, author name, social media links, and more. You can create a new configuration file by running the following command in your terminal:\u003c/p\u003e\n\u003cp\u003ejavascript\u003c/p\u003e\n\u003cp\u003ehugo new site config.toml\u003c/p\u003e\n\u003cp\u003eOnce you have created the configuration file, you can start creating content for your portfolio. You can create new pages and blog posts using the following commands:\u003c/p\u003e\n\u003cp\u003esql\u003c/p\u003e\n\u003cp\u003ehugo new about.md // create a new about page\nhugo new blog/my-first-post.md // create a new blog post\u003c/p\u003e\n\u003cp\u003eYou can then add your content to these files using Markdown syntax. Hugo supports Markdown, which makes it easy to create and format your content.\u003c/p\u003e\n\u003cp\u003eCustomizing your portfolio\nOnce you have created your portfolio, you can customize it further to make it unique. You can modify the theme files to change the look and feel of your website. You can also add custom CSS and JavaScript files to add extra functionality to your website.\u003c/p\u003e\n\u003cp\u003eDeploying your portfolio\nAfter customizing your website, you can deploy it to a web server. Hugo generates static HTML files that can be hosted on any web server. You can use services like GitHub Pages or Netlify to host your website for free.\u003c/p\u003e\n\u003cp\u003eConclusion\nCreating a personal portfolio using Hugo is a great way to showcase your skills and experience to potential employers or clients. With its simplicity and flexibility, Hugo makes it easy to create fast and efficient websites. By following the steps outlined in this post, you can create your own personal portfolio in no time.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://thelegion.tech/\" rel=\"ugc\"\u003ehttps://thelegion.tech/\u003c/a\u003e\u003c/p\u003e\n","description_plain":"https://thelegion.tech/\r\nIntroduction\r\nHugo is a popular open-source static site generator that allows you to create fast and efficient websites with ease. With its simplicity and flexibility, Hugo has become a popular choice for developers to build their personal websites and portfolios. In this post, we will explore how to create a personal portfolio using Hugo.\r\n\r\nSetting up Hugo\r\nBefore getting started with creating a personal portfolio, you need to set up Hugo on your machine. You can download Hugo from its official website and install it according to your operating system. Once installed, you can create a new site by running the following command in your terminal:\r\n\r\njavascript\r\n\r\nhugo new site your-site-name\r\n\r\nCreating your portfolio\r\nOnce you have set up Hugo, you can start creating your personal portfolio. The first step is to choose a theme for your website. There are plenty of Hugo themes available on the internet, and you can choose one that suits your needs. You can download the theme of your choice and add it to the \"themes\" directory of your Hugo site.\r\n\r\nAfter downloading the theme, you can configure your website by creating a configuration file. This file contains all the necessary information about your website, such as the site title, author name, social media links, and more. You can create a new configuration file by running the following command in your terminal:\r\n\r\njavascript\r\n\r\nhugo new site config.toml\r\n\r\nOnce you have created the configuration file, you can start creating content for your portfolio. You can create new pages and blog posts using the following commands:\r\n\r\nsql\r\n\r\nhugo new about.md // create a new about page\r\nhugo new blog/my-first-post.md // create a new blog post\r\n\r\nYou can then add your content to these files using Markdown syntax. Hugo supports Markdown, which makes it easy to create and format your content.\r\n\r\nCustomizing your portfolio\r\nOnce you have created your portfolio, you can customize it further to make it unique. You can modify the theme files to change the look and feel of your website. You can also add custom CSS and JavaScript files to add extra functionality to your website.\r\n\r\nDeploying your portfolio\r\nAfter customizing your website, you can deploy it to a web server. Hugo generates static HTML files that can be hosted on any web server. You can use services like GitHub Pages or Netlify to host your website for free.\r\n\r\nConclusion\r\nCreating a personal portfolio using Hugo is a great way to showcase your skills and experience to potential employers or clients. With its simplicity and flexibility, Hugo makes it easy to create fast and efficient websites. By following the steps outlined in this post, you can create your own personal portfolio in no time.\r\n\r\nhttps://thelegion.tech/","comments_url":"https://lobste.rs/s/4rl4rv/minimal_website_hugo","submitter_user":{"username":"sid1729","created_at":"2023-03-21T03:33:59.000-05:00","is_admin":false,"about":"Hi! am siddharth, i am a computer science enthusiast, I love solving interesting problems with computers and programming. Primarily interested in algorithms , data structures Design patterns, principles, databases, and large-scale systems Back-end technologies.","is_moderator":false,"karma":0,"avatar_url":"/avatars/sid1729-100.png","invited_by_user":"shivekkhurana"},"tags":["api","go"]},{"short_id":"zhl1tq","short_id_url":"https://lobste.rs/s/zhl1tq","created_at":"2023-03-20T08:04:34.000-05:00","title":"ChatGPT's Hallucinations Could Keep It from Succeeding","url":"https://spectrum.ieee.org/ai-hallucination","score":7,"flags":0,"comment_count":8,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zhl1tq/chatgpt_s_hallucinations_could_keep_it","submitter_user":{"username":"river","created_at":"2016-04-03T11:33:05.000-05:00","is_admin":false,"about":"(Deleted account)","is_moderator":false,"karma":5356,"avatar_url":"/avatars/river-100.png","invited_by_user":"355E3B"},"tags":["ai"]},{"short_id":"zcfnl0","short_id_url":"https://lobste.rs/s/zcfnl0","created_at":"2023-03-21T02:08:12.000-05:00","title":"Zero-1-to-3: Zero-shot One Image to 3D Object","url":"https://github.com/cvlab-columbia/zero123","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003ewebsite: \u003ca href=\"https://zero123.cs.columbia.edu/\" rel=\"ugc\"\u003ehttps://zero123.cs.columbia.edu/\u003c/a\u003e\u003c/p\u003e\n","description_plain":"website: https://zero123.cs.columbia.edu/","comments_url":"https://lobste.rs/s/zcfnl0/zero_1_3_zero_shot_one_image_3d_object","submitter_user":{"username":"BasicallyEternity","created_at":"2023-03-20T12:33:39.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1,"avatar_url":"/avatars/BasicallyEternity-100.png","invited_by_user":"shapr"},"tags":["ai"]},{"short_id":"la80l0","short_id_url":"https://lobste.rs/s/la80l0","created_at":"2023-03-20T11:40:58.000-05:00","title":"A deep dive into logging ecosystem","url":"https://www.parseable.io/blog/log-ecosystem-overview","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/la80l0/deep_dive_into_logging_ecosystem","submitter_user":{"username":"devupio","created_at":"2016-08-03T11:39:54.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":21,"avatar_url":"/avatars/devupio-100.png","invited_by_user":"tiwarinitish86"},"tags":["devops"]},{"short_id":"xh0s7r","short_id_url":"https://lobste.rs/s/xh0s7r","created_at":"2023-03-20T02:45:21.000-05:00","title":"Why We Added package.json Support to Deno","url":"https://deno.com/blog/package-json-support","score":10,"flags":0,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xh0s7r/why_we_added_package_json_support_deno","submitter_user":{"username":"gwil","created_at":"2022-11-17T04:59:47.000-06:00","is_admin":false,"about":"Illustrator, programmer, and Full-time FLOSS developer working on a distributed database called Earthstar.","is_moderator":false,"karma":109,"avatar_url":"/avatars/gwil-100.png","invited_by_user":"andrewchou"},"tags":["javascript"]},{"short_id":"gebjwz","short_id_url":"https://lobste.rs/s/gebjwz","created_at":"2023-03-20T08:05:19.000-05:00","title":"OpenBSD webzine issue #13","url":"https://webzine.puffy.cafe/issue-13.html","score":11,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gebjwz/openbsd_webzine_issue_13","submitter_user":{"username":"ciprian_craciun","created_at":"2022-02-14T13:47:43.000-06:00","is_admin":false,"about":"IT enthusiast, from programming to operating systems, from networking to cryptography, from cloud to hardware, from Erlang to Java.","is_moderator":false,"karma":883,"avatar_url":"/avatars/ciprian_craciun-100.png","invited_by_user":"syn-ack"},"tags":["openbsd"]}]